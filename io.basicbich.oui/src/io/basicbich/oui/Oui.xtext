grammar io.basicbich.oui.Oui with org.eclipse.xtext.common.Terminals

generate oui "http://basicbich.io/oui/Oui"

Program: {Program} (instructions=InstructionSet)?;

InstructionSet: instructions+=Instruction ('|' instructions+=Instruction)*;
Instruction: Selector | ObjectConstructor | Assignment | '(' InstructionSet ')';

/* Selector */
Selector: scope=SelectorScope (fragments+=SelectorFragment)*;

SelectorScope: RootSelectorScope | NamedSelectorScope;
NamedSelectorScope: AssignmentSelectorScope | FilterSelectorScope;
RootSelectorScope: {RootSelectorScope} '$';
AssignmentSelectorScope: '$' assignment=[Assignment]; // TODO: Add scope
FilterSelectorScope: filter=Filter;

SelectorFragment: RangeSelectorFragment | IndexSelectorFragment | NamedSelectorFragment;
NamedSelectorFragment: AttributeSelectorFragment;
// We need to make the difference between attributes provided by the user or the default values 
// of XText. Ex: "end" is optional, if it is missing it should be interpreted as "to the end", 
// however the default value of an integer is zero: this is why "NullableInt" is introduced.
RangeSelectorFragment: {RangeSelectorFragment} '[' (start=NullableINT)? ':' (end=NullableINT)? (':' step=NullableINT)? ']';
AttributeSelectorFragment: '.' attribute=ObjectAttributeName;
IndexSelectorFragment: '[' indexes+=INT (',' indexes+=INT)* ']';

/* Object constructor */
ObjectConstructor: '{' attributes+=ObjectAttribute (',' attributes+=ObjectAttribute)* '}';
ObjectAttribute: (name=ObjectAttributeName ':')? selector=Selector;
ObjectAttributeName: ID;

/* Assignment */
Assignment: name=ID '=' instruction=Instruction; // TODO: validate that name does not exist

/* Filter */
Filter: name=ID;

/* Utils */

// Allows to know if an optional value was set or not. By default, XText sets optional integers
// to zero if not set, which is inconvenient in our case.
NullableINT: val=INT;
